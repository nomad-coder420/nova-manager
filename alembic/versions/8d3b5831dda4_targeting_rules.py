"""targeting rules

Revision ID: 8d3b5831dda4
Revises: e20204923f06
Create Date: 2025-07-20 12:36:47.282959

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d3b5831dda4'
down_revision: Union[str, Sequence[str], None] = 'e20204923f06'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_campaigns_org_app'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_id'), table_name='campaigns')
    op.drop_index(op.f('ix_campaigns_pid'), table_name='campaigns')
    op.drop_table('campaigns')
    op.alter_column('personalisations', 'organisation_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('personalisations', 'app_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('targeting_rule_segments', sa.Column('rule_config', sa.JSON(), server_default=sa.text("json('{}')"), nullable=False))
    op.add_column('targeting_rules', sa.Column('rule_config', sa.JSON(), server_default=sa.text("json('{}')"), nullable=False))
    op.add_column('targeting_rules', sa.Column('rollout_percentage', sa.Integer(), nullable=False))
    op.drop_column('targeting_rules', 'target_percentage')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('targeting_rules', sa.Column('target_percentage', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('targeting_rules', 'rollout_percentage')
    op.drop_column('targeting_rules', 'rule_config')
    op.drop_column('targeting_rule_segments', 'rule_config')
    op.alter_column('personalisations', 'app_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('personalisations', 'organisation_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_table('campaigns',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('rule_config', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('launched_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('app_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('campaigns_pkey')),
    sa.UniqueConstraint('name', 'organisation_id', 'app_id', name=op.f('uq_campaigns_name_org_app'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_campaigns_pid'), 'campaigns', ['pid'], unique=True)
    op.create_index(op.f('ix_campaigns_id'), 'campaigns', ['id'], unique=True)
    op.create_index(op.f('idx_campaigns_org_app'), 'campaigns', ['organisation_id', 'app_id'], unique=False)
    # ### end Alembic commands ###
